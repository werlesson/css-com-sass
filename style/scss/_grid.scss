// Variáveis do grid
$cols: 12;
$gutter: 20px;
$l-device: 1200px;
$m-device: 760px;
$s-device: 480px;

// Box-sizing
*,
*::after,
*::before {
  box-sizing: border-box;
}

// Mixin de media-querie
@mixin d($size) {
  @if $size == l {
    @media screen and (min-width: #{$l-device}) {
      @content;
    }
  } @else if $size == m {
    @media screen and (min-width: #{$m-device}) and (max-width: #{$l-device} - 1) {
      @content;
    }
  } @else if $size == s {
    @media screen and (max-width: #{$m-device} - 1) {
      @content;
    }
  }
}

// Função do grid
@function grid($col, $offset: false) {
  $width: $col / $cols * 100 + "%";
  $result: calc(#{$width} - #{$gutter});
  @if $offset == offset {
    $gutter: $gutter / 2;
    $result: calc(#{$width} + #{$gutter});
  }
  @return $result;
}

// Gera as classes  de grid
@for $i from 1 through $cols {
  .grid-#{$i} {
    width: grid($i);
  }
}

// Mixin estrutura do grid
@mixin grid-structure {
  min-height: 1px;
  margin-left: $gutter / 2;
  margin-right: $gutter / 2;
  @include d(s) {
    width: 100%;
    margin-left: 0;
    margin-right: 0;
  }
}

[class^="grid-"] {
  @include grid-structure;
}

// Gera as classes  de offset
@for $i from 1 through $cols {
  .offset-#{$i} {
    margin-left: grid($i, offset);
    @extend %offset;
  }
}

@include d(s) {
  %offset {
    margin-left: 0;
  }
}

// Mixin Container
@mixin container {
  display: flex;
  flex-wrap: wrap;
  max-width: $l-device;
  margin: 0 auto;
  position: relative;
  @include d(m) {
    max-width: $m-device;
  }
  @include d(s) {
    max-width: $s-device;
    padding-left: 10px;
    padding-right: 10px;
  }
}

.container {
  @include container;
}

@mixin row {
  display: flex;
  flex-wrap: wrap;
  position: relative;
  margin-left: -gutter / 2;
  margin-right: -gutter / 2;
  @include d(s) {
    margin-left: 0;
    margin-right: 0;
  }
}

.row {
  @include row;
}

div {
  background: rgba(0, 0, 0, 0.4);
  min-height: 50px;
  margin-bottom: 10px;
}
